
Postlab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000853  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e9  00000000  00000000  00000bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c3  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f7  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020e  00000000  00000000  00001af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 91 00 	call	0x122	; 0x122 <main>
  9e:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
		}
    }
}

void initADC(void){
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	//Vref = AVcc = 5Vs
	ADMUX |= (1 << REFS0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR);	//left adjust
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);	//turn on ADC
  c4:	80 81       	ld	r24, Z
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//interruption
  ca:	80 81       	ld	r24, Z
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	80 83       	st	Z, r24
	
	//prescaler 128 > 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  d0:	80 81       	ld	r24, Z
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC0D);	//disable PC0 digital input 
  d6:	ee e7       	ldi	r30, 0x7E	; 126
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <__vector_21>:
}

ISR (ADC_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	//PORTD = ADCH;			//show in portd value of adc
	ADCSRA |= (1 << ADIF);	//turn off flag
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 61       	ori	r24, 0x10	; 16
  fa:	80 83       	st	Z, r24
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <initPCINT0>:

void initPCINT0(void){
	PCICR |= (1 << PCIE0);			//pin change
 10c:	e8 e6       	ldi	r30, 0x68	; 104
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT2) | (1 << PCINT3);	//mask
 116:	eb e6       	ldi	r30, 0x6B	; 107
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8c 60       	ori	r24, 0x0C	; 12
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <main>:
void initADC(void);
void initPCINT0(void);

int main(void)
{
	cli();
 122:	f8 94       	cli
	DDRC |= (1 << PINC1) | (1 << PINC2) | (1 << PINC3) | (1 << PINC4);
 124:	87 b1       	in	r24, 0x07	; 7
 126:	8e 61       	ori	r24, 0x1E	; 30
 128:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;
 12a:	18 b8       	out	0x08, r1	; 8
	PORTC |= (1 << PORTC1);
 12c:	88 b1       	in	r24, 0x08	; 8
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	88 b9       	out	0x08, r24	; 8
	
	DDRD = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 136:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;
 138:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	PORTB |= (1 << PINB2) | (1 << PINB3);		//pins as ouput w pull up
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	8c 60       	ori	r24, 0x0C	; 12
 140:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1 << PINB2) | ~(1 << PINB3);		//inputs
 142:	84 b1       	in	r24, 0x04	; 4
 144:	84 b9       	out	0x04, r24	; 4
	
	initADC();
 146:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	initPCINT0();
 14a:	0e 94 86 00 	call	0x10c	; 0x10c <initPCINT0>
	sei();
 14e:	78 94       	sei

	//infinite loop
    while (1) 
    {
		ADCSRA |= (1 << ADSC);
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 64       	ori	r24, 0x40	; 64
 158:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f e1       	ldi	r24, 0x1F	; 31
 15c:	9e e4       	ldi	r25, 0x4E	; 78
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x3c>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x42>
 164:	00 00       	nop
		_delay_ms(5);
		
		uint8_t decValue = ADCH;			//show in portd value of adc
 166:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		uint8_t value1 = decValue / 16;		//cociente
 16a:	a8 2f       	mov	r26, r24
 16c:	a2 95       	swap	r26
 16e:	af 70       	andi	r26, 0x0F	; 15
		uint8_t value2 = decValue % 16;		//resto
 170:	e8 2f       	mov	r30, r24
 172:	ef 70       	andi	r30, 0x0F	; 15
		
		//mux
		PORTC = 0;
 174:	18 b8       	out	0x08, r1	; 8
		PORTC |= (1 << PORTC1);
 176:	98 b1       	in	r25, 0x08	; 8
 178:	92 60       	ori	r25, 0x02	; 2
 17a:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1 << PORTC2) | ~(1 << PORTC3);
 17c:	98 b1       	in	r25, 0x08	; 8
 17e:	98 b9       	out	0x08, r25	; 8
		PORTD = counter;
 180:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 184:	9b b9       	out	0x0b, r25	; 11
 186:	cf e1       	ldi	r28, 0x1F	; 31
 188:	de e4       	ldi	r29, 0x4E	; 78
 18a:	21 97       	sbiw	r28, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0x68>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x6e>
 190:	00 00       	nop
		_delay_ms(5);
		
		PORTC = 0;
 192:	18 b8       	out	0x08, r1	; 8
		PORTC |= (1 << PORTC2);
 194:	98 b1       	in	r25, 0x08	; 8
 196:	94 60       	ori	r25, 0x04	; 4
 198:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1 << PORTC1) | ~(1 << PORTC3);
 19a:	98 b1       	in	r25, 0x08	; 8
 19c:	98 b9       	out	0x08, r25	; 8
		PORTD = display[value1];
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	a0 50       	subi	r26, 0x00	; 0
 1a2:	bf 4f       	sbci	r27, 0xFF	; 255
 1a4:	9c 91       	ld	r25, X
 1a6:	9b b9       	out	0x0b, r25	; 11
 1a8:	af e1       	ldi	r26, 0x1F	; 31
 1aa:	be e4       	ldi	r27, 0x4E	; 78
 1ac:	11 97       	sbiw	r26, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x8a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x90>
 1b2:	00 00       	nop
		_delay_ms(5);
		
		PORTC = 0;
 1b4:	18 b8       	out	0x08, r1	; 8
		PORTC |= (1 << PORTC3);
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	98 60       	ori	r25, 0x08	; 8
 1ba:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1 << PORTC2) | ~(1 << PORTC1);
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	98 b9       	out	0x08, r25	; 8
		PORTD = display[value2];
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	90 81       	ld	r25, Z
 1c8:	9b b9       	out	0x0b, r25	; 11
		
		if(decValue > counter){
 1ca:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 1ce:	98 17       	cp	r25, r24
 1d0:	20 f4       	brcc	.+8      	; 0x1da <main+0xb8>
			PORTC |= (1 << PORTC4);
 1d2:	88 b1       	in	r24, 0x08	; 8
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	88 b9       	out	0x08, r24	; 8
 1d8:	bb cf       	rjmp	.-138    	; 0x150 <main+0x2e>
		}else{
			PORTC &= ~(1 << PORTC4);
 1da:	88 b1       	in	r24, 0x08	; 8
 1dc:	8f 7e       	andi	r24, 0xEF	; 239
 1de:	88 b9       	out	0x08, r24	; 8
 1e0:	b7 cf       	rjmp	.-146    	; 0x150 <main+0x2e>

000001e2 <__vector_3>:
void initPCINT0(void){
	PCICR |= (1 << PCIE0);			//pin change
	PCMSK0 |= (1 << PCINT2) | (1 << PCINT3);	//mask
}

ISR (PCINT0_vect){
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
	if (!(PINB & (1 << PINB2))) {
 1ee:	1a 99       	sbic	0x03, 2	; 3
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <__vector_3+0x1c>
		counter++;
 1f2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <__vector_3+0x2a>
	}else if (!(PINB & (1 << PINB3))) {
 1fe:	1b 99       	sbic	0x03, 3	; 3
 200:	05 c0       	rjmp	.+10     	; 0x20c <__vector_3+0x2a>
		counter--;
 202:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 206:	81 50       	subi	r24, 0x01	; 1
 208:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
